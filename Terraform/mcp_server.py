from mcp.server.fastmcp import FastMCP
import os
from python_terraform import Terraform
from typing import Dict, Any

mcp = FastMCP("terraform-validator")

# Generated by GitHub Copilot
# Load and define MCP prompts for Terraform workflow

def load_prompt_content(file_path: str) -> str:
    """Load content from a prompt file."""
    if not os.path.exists(file_path):
        return ""
    with open(file_path, "r", encoding="utf-8") as f:
        return f.read().strip()

# Load prompt files
prompts_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", ".github", "prompts")
breakdown_prompt_path = os.path.join(prompts_dir, "01-breakdown.prompt.md")
generate_prompt_path = os.path.join(prompts_dir, "02-generate.prompt.md")
validate_prompt_path = os.path.join(prompts_dir, "03-validate.prompt.md")

breakdown_content = load_prompt_content(breakdown_prompt_path)
generate_content = load_prompt_content(generate_prompt_path)
validate_content = load_prompt_content(validate_prompt_path)

@mcp.prompt(name="terraform_breakdown", description="Create a resource planning breakdown for infrastructure requests")
def terraform_breakdown_prompt(user_input: str) -> str:
    """Generate a resource creation plan based on user infrastructure requirements."""
    return breakdown_content.replace("{{user_input}}", user_input)

@mcp.prompt(name="terraform_generate", description="Generate Terraform code from a resource creation plan")
def terraform_generate_prompt() -> str:
    """Generate complete Terraform codebase from the resource planning file."""
    return generate_content

@mcp.prompt(name="terraform_validate", description="Validate and refine Terraform scripts iteratively")
def terraform_validate_prompt() -> str:
    """Use terraform_validator tool to assess and refine Terraform scripts until validation passes."""
    return validate_content

@mcp.tool()
def terraform_validator() -> Dict[str, Any]:
    """Initializes and validates terraform scripts present in the currrent wroking directory."""

    try:
        tf = Terraform(working_dir=os.path.dirname(os.path.abspath(__file__)))

        # Optional: init before validate
        return_code, stdout, stderr = tf.init()
        if return_code != 0:
            error_msg = stderr if stderr else 'Unknown init error'
            return {
                "success": False,
                "errors": [f"Terraform init failed: {error_msg}"]
            }

        # Validate the Terraform configuration
        return_code, stdout, stderr = tf.validate()
        if return_code == 0:
            return {
                "success": True,
                "errors": []
            }
        else:
            error_msg = stderr if stderr else 'Unknown validation error'
            return {
                "success": False,
                "errors": [f"Terraform validation failed: {error_msg}"]
            }
    except Exception as e:
        return {
            "success": False,
            "errors": [f"Script failed with an error: {str(e)}"]
        }
    
if __name__ == "__main__":
    # Initialize and run the server
    mcp.run(transport='sse')